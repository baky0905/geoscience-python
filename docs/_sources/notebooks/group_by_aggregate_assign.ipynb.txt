{
 "cells": [
  {
   "cell_type": "markdown",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group By, Summary Statistic and New Columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate summary statistic (min, max, mean, count,...) per group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wellbore_name</th>\n      <th>well</th>\n      <th>drilling_operator</th>\n      <th>production_licence</th>\n      <th>purpose</th>\n      <th>status</th>\n      <th>content</th>\n      <th>well_type</th>\n      <th>sub_sea</th>\n      <th>entry_date</th>\n      <th>...</th>\n      <th>npdid_wellbore</th>\n      <th>dsc_npdid_discovery</th>\n      <th>npdid_field</th>\n      <th>npdid_facility_drilling</th>\n      <th>npdid_wellbore_reclass</th>\n      <th>l_npdid_production_licence</th>\n      <th>npdid_site_survey</th>\n      <th>date_updated</th>\n      <th>date_updated_max</th>\n      <th>datesync_npd</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1/2-1</td>\n      <td>1/2-1</td>\n      <td>Phillips Petroleum Norsk AS</td>\n      <td>143</td>\n      <td>WILDCAT</td>\n      <td>P&amp;A</td>\n      <td>OIL</td>\n      <td>EXPLORATION</td>\n      <td>NO</td>\n      <td>20.03.1989</td>\n      <td>...</td>\n      <td>1382</td>\n      <td>43814.0</td>\n      <td>3437650.0</td>\n      <td>296245.0</td>\n      <td>0</td>\n      <td>21956.0</td>\n      <td>NaN</td>\n      <td>03.10.2019</td>\n      <td>03.10.2019</td>\n      <td>22.11.2019</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1/2-2</td>\n      <td>1/2-2</td>\n      <td>Paladin Resources Norge AS</td>\n      <td>143 CS</td>\n      <td>WILDCAT</td>\n      <td>P&amp;A</td>\n      <td>OIL SHOWS</td>\n      <td>EXPLORATION</td>\n      <td>NO</td>\n      <td>14.12.2005</td>\n      <td>...</td>\n      <td>5192</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>278245.0</td>\n      <td>0</td>\n      <td>2424919.0</td>\n      <td>NaN</td>\n      <td>03.10.2019</td>\n      <td>03.10.2019</td>\n      <td>22.11.2019</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1/3-1</td>\n      <td>1/3-1</td>\n      <td>A/S Norske Shell</td>\n      <td>011</td>\n      <td>WILDCAT</td>\n      <td>P&amp;A</td>\n      <td>GAS</td>\n      <td>EXPLORATION</td>\n      <td>NO</td>\n      <td>06.07.1968</td>\n      <td>...</td>\n      <td>154</td>\n      <td>43820.0</td>\n      <td>NaN</td>\n      <td>288604.0</td>\n      <td>0</td>\n      <td>20844.0</td>\n      <td>NaN</td>\n      <td>03.10.2019</td>\n      <td>03.10.2019</td>\n      <td>22.11.2019</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1/3-2</td>\n      <td>1/3-2</td>\n      <td>A/S Norske Shell</td>\n      <td>011</td>\n      <td>WILDCAT</td>\n      <td>P&amp;A</td>\n      <td>DRY</td>\n      <td>EXPLORATION</td>\n      <td>NO</td>\n      <td>14.05.1969</td>\n      <td>...</td>\n      <td>165</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>288847.0</td>\n      <td>0</td>\n      <td>20844.0</td>\n      <td>NaN</td>\n      <td>03.10.2019</td>\n      <td>03.10.2019</td>\n      <td>22.11.2019</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>1/3-3</td>\n      <td>1/3-3</td>\n      <td>Elf Petroleum Norge AS</td>\n      <td>065</td>\n      <td>WILDCAT</td>\n      <td>P&amp;A</td>\n      <td>OIL</td>\n      <td>EXPLORATION</td>\n      <td>NO</td>\n      <td>22.08.1982</td>\n      <td>...</td>\n      <td>87</td>\n      <td>43826.0</td>\n      <td>1028599.0</td>\n      <td>288334.0</td>\n      <td>0</td>\n      <td>21316.0</td>\n      <td>NaN</td>\n      <td>03.10.2019</td>\n      <td>03.10.2019</td>\n      <td>22.11.2019</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 87 columns</p>\n</div>",
      "text/plain": "  wellbore_name   well            drilling_operator production_licence  \\\n0         1/2-1  1/2-1  Phillips Petroleum Norsk AS               143    \n1         1/2-2  1/2-2   Paladin Resources Norge AS             143 CS   \n2         1/3-1  1/3-1             A/S Norske Shell               011    \n3         1/3-2  1/3-2             A/S Norske Shell               011    \n4         1/3-3  1/3-3       Elf Petroleum Norge AS               065    \n\n   purpose status    content    well_type sub_sea  entry_date  ...  \\\n0  WILDCAT    P&A        OIL  EXPLORATION      NO  20.03.1989  ...   \n1  WILDCAT    P&A  OIL SHOWS  EXPLORATION      NO  14.12.2005  ...   \n2  WILDCAT    P&A        GAS  EXPLORATION      NO  06.07.1968  ...   \n3  WILDCAT    P&A        DRY  EXPLORATION      NO  14.05.1969  ...   \n4  WILDCAT    P&A        OIL  EXPLORATION      NO  22.08.1982  ...   \n\n  npdid_wellbore dsc_npdid_discovery npdid_field npdid_facility_drilling  \\\n0           1382             43814.0   3437650.0                296245.0   \n1           5192                 NaN         NaN                278245.0   \n2            154             43820.0         NaN                288604.0   \n3            165                 NaN         NaN                288847.0   \n4             87             43826.0   1028599.0                288334.0   \n\n  npdid_wellbore_reclass  l_npdid_production_licence npdid_site_survey  \\\n0                      0                     21956.0               NaN   \n1                      0                   2424919.0               NaN   \n2                      0                     20844.0               NaN   \n3                      0                     20844.0               NaN   \n4                      0                     21316.0               NaN   \n\n  date_updated  date_updated_max  datesync_npd  \n0   03.10.2019        03.10.2019    22.11.2019  \n1   03.10.2019        03.10.2019    22.11.2019  \n2   03.10.2019        03.10.2019    22.11.2019  \n3   03.10.2019        03.10.2019    22.11.2019  \n4   03.10.2019        03.10.2019    22.11.2019  \n\n[5 rows x 87 columns]"
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "local_relative_path = \"./source/data_processed/wellbore_exploration_all_clean_names.csv\"\n",
    "wellbore_exploration_all = pd.read_csv(local_relative_path)\n",
    "wellbore_exploration_all.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the minimum and maximum total_depth grouped by `completion_year` and sorted by `entry_year`?\n",
    "\n",
    "We see that well_bore name was silently dropped since it is a categorical column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>entry_year</th>\n      <th>total_depth_min</th>\n      <th>total_depth_max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2019</td>\n      <td>0.0</td>\n      <td>6068.0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018</td>\n      <td>381.0</td>\n      <td>6100.0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2017</td>\n      <td>508.0</td>\n      <td>7811.0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2016</td>\n      <td>488.0</td>\n      <td>7126.0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2015</td>\n      <td>840.0</td>\n      <td>5765.0</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>2014</td>\n      <td>1033.0</td>\n      <td>4889.0</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>2013</td>\n      <td>930.0</td>\n      <td>5634.0</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>2012</td>\n      <td>1640.0</td>\n      <td>5573.0</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>2011</td>\n      <td>1339.0</td>\n      <td>5672.0</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>2010</td>\n      <td>1178.0</td>\n      <td>5738.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
      "text/plain": "   entry_year  total_depth_min  total_depth_max\n0        2019              0.0           6068.0\n1        2018            381.0           6100.0\n2        2017            508.0           7811.0\n3        2016            488.0           7126.0\n4        2015            840.0           5765.0\n5        2014           1033.0           4889.0\n6        2013            930.0           5634.0\n7        2012           1640.0           5573.0\n8        2011           1339.0           5672.0\n9        2010           1178.0           5738.0"
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(wellbore_exploration_all\n",
    "  .filter(items=[\"wellbore_name\", \"entry_year\", \"total_depth\"])\n",
    "  .groupby(\"entry_year\")\n",
    "  .agg(\n",
    "    total_depth_min = pd.NamedAgg(column=\"total_depth\", aggfunc=\"min\"),\n",
    "    total_depth_max = pd.NamedAgg(column=\"total_depth\", aggfunc=\"max\")\n",
    "    )\n",
    "  .sort_values(\"entry_year\", ascending = False)\n",
    "  .reset_index()\n",
    "  ).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add a new calculated column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is lambda or anonymus function?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "add_ten = lambda x: x + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "11"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add_ten(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New calculated column"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-6-7690b6972493>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-6-7690b6972493>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    assign method returns a new object with all original columns in addition to new ones. Existing columns that are re-assigned will be overwritten. For adding new columns to a DataFrame in a chain (inspired by dplyr's mutate)\u001b[0m\n\u001b[1;37m                ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "`assign` method returns a new object with all original columns in addition to new ones. Existing columns that are re-assigned will be overwritten. For adding new columns to a DataFrame in a chain (inspired by `dply`r's `mutate`)\n",
    "\n",
    "`depth_flag` will be the new column that will have two values, if `total_depth` is larger or equal to 2000m, it will be classified as `\"deep\"`, otherwise it will be classified as `\"shallow\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wellbore_name</th>\n      <th>total_depth</th>\n      <th>utm_zone</th>\n      <th>depth_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1/2-1</td>\n      <td>3574.0</td>\n      <td>31</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1/2-2</td>\n      <td>3434.0</td>\n      <td>31</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1/3-1</td>\n      <td>4877.0</td>\n      <td>31</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1/3-2</td>\n      <td>4297.0</td>\n      <td>31</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>1/3-3</td>\n      <td>4876.0</td>\n      <td>31</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>1917</td>\n      <td>7324/10-1</td>\n      <td>2919.0</td>\n      <td>35</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>1918</td>\n      <td>7325/1-1</td>\n      <td>2865.0</td>\n      <td>35</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>1919</td>\n      <td>7325/4-1</td>\n      <td>1210.0</td>\n      <td>35</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>1920</td>\n      <td>7335/3-1</td>\n      <td>4300.0</td>\n      <td>37</td>\n      <td>deep</td>\n    </tr>\n    <tr>\n      <td>1921</td>\n      <td>7435/12-1</td>\n      <td>1540.0</td>\n      <td>37</td>\n      <td>deep</td>\n    </tr>\n  </tbody>\n</table>\n<p>1922 rows Ã— 4 columns</p>\n</div>",
      "text/plain": "     wellbore_name  total_depth  utm_zone depth_flag\n0            1/2-1       3574.0        31       deep\n1            1/2-2       3434.0        31       deep\n2            1/3-1       4877.0        31       deep\n3            1/3-2       4297.0        31       deep\n4            1/3-3       4876.0        31       deep\n...            ...          ...       ...        ...\n1917     7324/10-1       2919.0        35       deep\n1918      7325/1-1       2865.0        35       deep\n1919      7325/4-1       1210.0        35       deep\n1920      7335/3-1       4300.0        37       deep\n1921     7435/12-1       1540.0        37       deep\n\n[1922 rows x 4 columns]"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(wellbore_exploration_all\n",
    "    .filter(items=[\"wellbore_name\", \"total_depth\", \"utm_zone\"])\n",
    "    .assign(\n",
    "        depth_flag=lambda x: np.where(x[\"total_depth\"] >= 1000, \"deep\", \"shallow\")\n",
    "        )  \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add calculated columns that are dependent on each othe"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-8-265249f0bd96>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-8-265249f0bd96>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    In Python 3.6+, you can create multiple columns within the same assign where one of the columns depends on another one defined within the same assign.\u001b[0m\n\u001b[1;37m            ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "In Python 3.6+, you can create multiple columns within the same `assign` where one of the columns depends on another one defined within the same `assign`.\n",
    "\n",
    "We will calculate two new columns:\n",
    "\n",
    "* `drilling_depth_flag` column which is when `total_depth` column has values larger or equal to 1000m, where they will be classified as \"deep\", and otherwise as \"shallow\"\n",
    "* `depth_age_flag` column is dependent on the previously calculated column `drilling_depth_flag`. Output of the column is \"deep_and_old\" if `drilling_depth_flag` column is \"deep\") AND if \"completion_year\" column is less and equal than 2010, otherwise it is \"shallow_and_new\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wellbore_name</th>\n      <th>total_depth</th>\n      <th>utm_zone</th>\n      <th>completion_year</th>\n      <th>drilling_depth_flag</th>\n      <th>depth_age_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1/2-1</td>\n      <td>3574.0</td>\n      <td>31</td>\n      <td>1989</td>\n      <td>deep</td>\n      <td>deep_and_old</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1/2-2</td>\n      <td>3434.0</td>\n      <td>31</td>\n      <td>2006</td>\n      <td>deep</td>\n      <td>deep_and_old</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1/3-1</td>\n      <td>4877.0</td>\n      <td>31</td>\n      <td>1968</td>\n      <td>deep</td>\n      <td>deep_and_old</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1/3-2</td>\n      <td>4297.0</td>\n      <td>31</td>\n      <td>1969</td>\n      <td>deep</td>\n      <td>deep_and_old</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>1/3-3</td>\n      <td>4876.0</td>\n      <td>31</td>\n      <td>1983</td>\n      <td>deep</td>\n      <td>deep_and_old</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>1917</td>\n      <td>7324/10-1</td>\n      <td>2919.0</td>\n      <td>35</td>\n      <td>1989</td>\n      <td>deep</td>\n      <td>deep_and_old</td>\n    </tr>\n    <tr>\n      <td>1918</td>\n      <td>7325/1-1</td>\n      <td>2865.0</td>\n      <td>35</td>\n      <td>2014</td>\n      <td>deep</td>\n      <td>deep_and_new</td>\n    </tr>\n    <tr>\n      <td>1919</td>\n      <td>7325/4-1</td>\n      <td>1210.0</td>\n      <td>35</td>\n      <td>2017</td>\n      <td>deep</td>\n      <td>deep_and_new</td>\n    </tr>\n    <tr>\n      <td>1920</td>\n      <td>7335/3-1</td>\n      <td>4300.0</td>\n      <td>37</td>\n      <td>2019</td>\n      <td>deep</td>\n      <td>deep_and_new</td>\n    </tr>\n    <tr>\n      <td>1921</td>\n      <td>7435/12-1</td>\n      <td>1540.0</td>\n      <td>37</td>\n      <td>2017</td>\n      <td>deep</td>\n      <td>deep_and_new</td>\n    </tr>\n  </tbody>\n</table>\n<p>1922 rows Ã— 6 columns</p>\n</div>",
      "text/plain": "     wellbore_name  total_depth  utm_zone  completion_year  \\\n0            1/2-1       3574.0        31             1989   \n1            1/2-2       3434.0        31             2006   \n2            1/3-1       4877.0        31             1968   \n3            1/3-2       4297.0        31             1969   \n4            1/3-3       4876.0        31             1983   \n...            ...          ...       ...              ...   \n1917     7324/10-1       2919.0        35             1989   \n1918      7325/1-1       2865.0        35             2014   \n1919      7325/4-1       1210.0        35             2017   \n1920      7335/3-1       4300.0        37             2019   \n1921     7435/12-1       1540.0        37             2017   \n\n     drilling_depth_flag depth_age_flag  \n0                   deep   deep_and_old  \n1                   deep   deep_and_old  \n2                   deep   deep_and_old  \n3                   deep   deep_and_old  \n4                   deep   deep_and_old  \n...                  ...            ...  \n1917                deep   deep_and_old  \n1918                deep   deep_and_new  \n1919                deep   deep_and_new  \n1920                deep   deep_and_new  \n1921                deep   deep_and_new  \n\n[1922 rows x 6 columns]"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(wellbore_exploration_all\n",
    "    .filter(items=[\"wellbore_name\", \"total_depth\", \"utm_zone\", \"completion_year\"])\n",
    "    .assign(\n",
    "        drilling_depth_flag=lambda x: np.where(x[\"total_depth\"] >= 1000, \"deep\", \"shallow\"),\n",
    "        depth_age_flag=lambda x: np.where(\n",
    "            (x[\"drilling_depth_flag\"] == \"deep\") & (x[\"completion_year\"] <= 2010),   # drilling_depth_flag has been created in previous step \n",
    "            \"deep_and_old\", \"deep_and_new\")\n",
    "        )  \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculated column - define multiple cases with np.select"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Shallow Water    1373\nMidwater          547\nDeepwater           2\nName: water_depth_category, dtype: int64"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_multiple = (wellbore_exploration_all\n",
    "    .filter(items=[\"wellbore_name\", \"total_depth\", \"water_depth\"])\n",
    "    .assign(\n",
    "        water_depth_category = lambda x: np.select(\n",
    "            condlist = [\n",
    "                x[\"water_depth\"].between(0, 305, inclusive=True),\n",
    "                x[\"water_depth\"].between(306, 1524, inclusive=True),\n",
    "                x[\"water_depth\"].between(1525, 2133, inclusive=True),\n",
    "                x[\"water_depth\"].between(2134, np.max(x[\"water_depth\"]), inclusive=True)\n",
    "                ],\n",
    "            choicelist = [ \n",
    "                \"Shallow Water\",\n",
    "                \"Midwater\",\n",
    "                \"Deepwater\",\n",
    "                \"Ultra-Deepwater\"\n",
    "            ],\n",
    "            default=\"Unknown\" \n",
    "        )\n",
    "    )\n",
    ")\n",
    "df_multiple[\"water_depth_category\"].value_counts()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wellbore_name</th>\n      <th>total_depth</th>\n      <th>water_depth</th>\n      <th>water_depth_category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>808</td>\n      <td>30/3-4</td>\n      <td>3287.0</td>\n      <td>164.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>1409</td>\n      <td>6306/6-1</td>\n      <td>1317.0</td>\n      <td>284.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>1598</td>\n      <td>6507/3-5 S</td>\n      <td>4265.0</td>\n      <td>368.0</td>\n      <td>Midwater</td>\n    </tr>\n    <tr>\n      <td>266</td>\n      <td>8/1-1</td>\n      <td>2971.0</td>\n      <td>67.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>1443</td>\n      <td>6406/3-4</td>\n      <td>4414.0</td>\n      <td>295.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>1305</td>\n      <td>35/8-4</td>\n      <td>3719.0</td>\n      <td>376.0</td>\n      <td>Midwater</td>\n    </tr>\n    <tr>\n      <td>381</td>\n      <td>15/9-16</td>\n      <td>3120.0</td>\n      <td>85.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>785</td>\n      <td>25/11-25 A</td>\n      <td>2448.0</td>\n      <td>125.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>1133</td>\n      <td>34/7-13</td>\n      <td>2994.0</td>\n      <td>282.0</td>\n      <td>Shallow Water</td>\n    </tr>\n    <tr>\n      <td>1380</td>\n      <td>36/7-4</td>\n      <td>2726.0</td>\n      <td>349.0</td>\n      <td>Midwater</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
      "text/plain": "     wellbore_name  total_depth  water_depth water_depth_category\n808         30/3-4       3287.0        164.0        Shallow Water\n1409      6306/6-1       1317.0        284.0        Shallow Water\n1598    6507/3-5 S       4265.0        368.0             Midwater\n266          8/1-1       2971.0         67.0        Shallow Water\n1443      6406/3-4       4414.0        295.0        Shallow Water\n1305        35/8-4       3719.0        376.0             Midwater\n381        15/9-16       3120.0         85.0        Shallow Water\n785     25/11-25 A       2448.0        125.0        Shallow Water\n1133       34/7-13       2994.0        282.0        Shallow Water\n1380        36/7-4       2726.0        349.0             Midwater"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_multiple.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Converting columns to date and time, and calculating difference"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "`entry_date` and `completion_date` columns are not in datetime format so we need to convert them before we can calculate easily the difference between them in for example - days.\n",
    "\n",
    "Method used is [pandas.to_datetime](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html])\n",
    "and we will use it within `.assign` method.\n",
    "\n",
    "When calcualting `days_of_drilling` column I will use lambda function where I will just deduct converted datetime columns and you will notice I am wrapping the difference into `.dt.day` - which will then return the day of the date time in the underlying data of the given Series object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>well</th>\n      <th>entry_date</th>\n      <th>completion_date</th>\n      <th>days_of_drilling</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>1/2-1</td>\n      <td>1989-03-20</td>\n      <td>1989-04-06</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>1/2-2</td>\n      <td>2005-12-14</td>\n      <td>2006-02-02</td>\n      <td>50.0</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>1/3-1</td>\n      <td>1968-06-07</td>\n      <td>1968-11-11</td>\n      <td>157.0</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1/3-2</td>\n      <td>1969-05-14</td>\n      <td>1969-07-27</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>1/3-3</td>\n      <td>1982-08-22</td>\n      <td>1983-03-24</td>\n      <td>214.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
      "text/plain": "    well entry_date completion_date  days_of_drilling\n0  1/2-1 1989-03-20      1989-04-06              17.0\n1  1/2-2 2005-12-14      2006-02-02              50.0\n2  1/3-1 1968-06-07      1968-11-11             157.0\n3  1/3-2 1969-05-14      1969-07-27              74.0\n4  1/3-3 1982-08-22      1983-03-24             214.0"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wellbore_exploration_all.columns\n",
    "\n",
    "df_days = (wellbore_exploration_all\n",
    "    .filter(items = ['well', 'entry_date','completion_date'])\n",
    "    .assign(\n",
    "        entry_date=pd.to_datetime(wellbore_exploration_all['entry_date']),\n",
    "        completion_date=pd.to_datetime(wellbore_exploration_all['completion_date']),\n",
    "        days_of_drilling = lambda x: (x[\"completion_date\"] - x[\"entry_date\"]).dt.days,\n",
    "        )\n",
    "    )\n",
    "df_days.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}